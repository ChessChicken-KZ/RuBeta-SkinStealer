package kz.chesschicken.skinstealer;

import kz.chesschicken.skinstealer.utils.PanelPicture;
import kz.chesschicken.skinstealer.utils.Utilities;

import javax.swing.*;
import javax.swing.plaf.FontUIResource;
import javax.swing.text.StyleContext;
import java.awt.*;
import java.awt.image.BufferedImage;
import java.util.Locale;

public class PanelMain {
    private JPanel mainPanel;
    private JLabel LABEL_1;
    private JLabel LABEL_2;
    private JTextField USERNAME;
    private JButton BUTTON_LOAD;
    private JPanel panelSkins;
    private JButton SAVE_CLOAK;
    private JButton SAVE_SKIN;
    private JPanel SHOW_SKIN;
    private JPanel SHOW_CLOAK;
    private JLabel AUTHOR1;

    public JPanel getMainPanel() {
        return this.mainPanel;
    }

    public BufferedImage currentSkin;
    public BufferedImage currentCloak;

    public PanelMain(JFrame home) {
        $$$setupUI$$$();
        BUTTON_LOAD.addActionListener(e -> {
            if (USERNAME.getText().trim().length() < 1)
                return;
            Utilities.TryResult<BufferedImage> skinImage = Utilities.downloadImage("http://assets.rubeta.net/skins/" + USERNAME.getText().trim() + ".png", false);
            PanelMain.this.currentSkin = skinImage.successful ? skinImage.value : null;
            Utilities.TryResult<BufferedImage> cloakImage = Utilities.downloadImage("http://assets.rubeta.net/cloaks/" + USERNAME.getText().trim() + ".png", false);
            PanelMain.this.currentCloak = cloakImage.successful ? cloakImage.value : null;

            ((PanelPicture) PanelMain.this.SHOW_SKIN).setImage(PanelMain.this.currentSkin);
            SAVE_SKIN.setEnabled(skinImage.successful);

            ((PanelPicture) PanelMain.this.SHOW_CLOAK).setImage(PanelMain.this.currentCloak);
            SAVE_CLOAK.setEnabled(cloakImage.successful);
        });
        SAVE_SKIN.addActionListener(e -> Utilities.commitSaveOperation(home, true, USERNAME.getText().trim(), currentSkin));
        SAVE_CLOAK.addActionListener(e -> Utilities.commitSaveOperation(home, false, USERNAME.getText().trim(), currentCloak));
    }

    private void createUIComponents() {
        this.SHOW_SKIN = new PanelPicture(true);
        this.SHOW_CLOAK = new PanelPicture(false);
    }

    /**
     * Method generated by IntelliJ IDEA GUI Designer
     * >>> IMPORTANT!! <<<
     * DO NOT edit this method OR call it in your code!
     *
     * @noinspection ALL
     */
    private void $$$setupUI$$$() {
        createUIComponents();
        mainPanel = new JPanel();
        mainPanel.setLayout(new com.intellij.uiDesigner.core.GridLayoutManager(5, 3, new Insets(0, 0, 0, 0), -1, -1));
        LABEL_1 = new JLabel();
        Font LABEL_1Font = this.$$$getFont$$$(null, -1, 14, LABEL_1.getFont());
        if (LABEL_1Font != null) LABEL_1.setFont(LABEL_1Font);
        LABEL_1.setText("  Skin Stealer - скачай скины/плащи игроков RuBeta.");
        mainPanel.add(LABEL_1, new com.intellij.uiDesigner.core.GridConstraints(0, 0, 1, 3, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_WEST, com.intellij.uiDesigner.core.GridConstraints.FILL_NONE, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(357, 37), null, 0, false));
        LABEL_2 = new JLabel();
        Font LABEL_2Font = this.$$$getFont$$$(null, -1, 14, LABEL_2.getFont());
        if (LABEL_2Font != null) LABEL_2.setFont(LABEL_2Font);
        LABEL_2.setText("  Ник Игрока:");
        mainPanel.add(LABEL_2, new com.intellij.uiDesigner.core.GridConstraints(2, 0, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_EAST, com.intellij.uiDesigner.core.GridConstraints.FILL_NONE, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        USERNAME = new JTextField();
        mainPanel.add(USERNAME, new com.intellij.uiDesigner.core.GridConstraints(2, 1, 1, 2, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_WEST, com.intellij.uiDesigner.core.GridConstraints.FILL_HORIZONTAL, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_WANT_GROW, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(150, -1), null, 0, false));
        panelSkins = new JPanel();
        panelSkins.setLayout(new com.intellij.uiDesigner.core.GridLayoutManager(1, 2, new Insets(0, 0, 0, 0), -1, -1));
        mainPanel.add(panelSkins, new com.intellij.uiDesigner.core.GridConstraints(4, 0, 1, 3, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_CENTER, com.intellij.uiDesigner.core.GridConstraints.FILL_BOTH, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_SHRINK | com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_GROW, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_SHRINK | com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
        panelSkins.add(SHOW_SKIN, new com.intellij.uiDesigner.core.GridConstraints(0, 0, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_CENTER, com.intellij.uiDesigner.core.GridConstraints.FILL_BOTH, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_SHRINK | com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_GROW, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_SHRINK | com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
        panelSkins.add(SHOW_CLOAK, new com.intellij.uiDesigner.core.GridConstraints(0, 1, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_CENTER, com.intellij.uiDesigner.core.GridConstraints.FILL_BOTH, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_SHRINK | com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_GROW, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_SHRINK | com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
        BUTTON_LOAD = new JButton();
        BUTTON_LOAD.setText("Загрузить!");
        mainPanel.add(BUTTON_LOAD, new com.intellij.uiDesigner.core.GridConstraints(3, 0, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_CENTER, com.intellij.uiDesigner.core.GridConstraints.FILL_HORIZONTAL, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_SHRINK | com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_GROW, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        SAVE_SKIN = new JButton();
        SAVE_SKIN.setEnabled(false);
        SAVE_SKIN.setText("Сохр. Скин");
        mainPanel.add(SAVE_SKIN, new com.intellij.uiDesigner.core.GridConstraints(3, 1, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_CENTER, com.intellij.uiDesigner.core.GridConstraints.FILL_HORIZONTAL, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_SHRINK | com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_GROW, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        SAVE_CLOAK = new JButton();
        SAVE_CLOAK.setEnabled(false);
        SAVE_CLOAK.setText("Сохр. Плащ");
        mainPanel.add(SAVE_CLOAK, new com.intellij.uiDesigner.core.GridConstraints(3, 2, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_CENTER, com.intellij.uiDesigner.core.GridConstraints.FILL_HORIZONTAL, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_SHRINK | com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_GROW, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        AUTHOR1 = new JLabel();
        Font AUTHOR1Font = this.$$$getFont$$$(null, Font.ITALIC, 12, AUTHOR1.getFont());
        if (AUTHOR1Font != null) AUTHOR1.setFont(AUTHOR1Font);
        AUTHOR1.setText("Сделано ChessChicken-KZ с сохранением традиции(?).");
        mainPanel.add(AUTHOR1, new com.intellij.uiDesigner.core.GridConstraints(1, 0, 1, 3, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_EAST, com.intellij.uiDesigner.core.GridConstraints.FILL_NONE, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
    }

    /**
     * @noinspection ALL
     */
    private Font $$$getFont$$$(String fontName, int style, int size, Font currentFont) {
        if (currentFont == null) return null;
        String resultName;
        if (fontName == null) {
            resultName = currentFont.getName();
        } else {
            Font testFont = new Font(fontName, Font.PLAIN, 10);
            if (testFont.canDisplay('a') && testFont.canDisplay('1')) {
                resultName = fontName;
            } else {
                resultName = currentFont.getName();
            }
        }
        Font font = new Font(resultName, style >= 0 ? style : currentFont.getStyle(), size >= 0 ? size : currentFont.getSize());
        boolean isMac = System.getProperty("os.name", "").toLowerCase(Locale.ENGLISH).startsWith("mac");
        Font fontWithFallback = isMac ? new Font(font.getFamily(), font.getStyle(), font.getSize()) : new StyleContext().getFont(font.getFamily(), font.getStyle(), font.getSize());
        return fontWithFallback instanceof FontUIResource ? fontWithFallback : new FontUIResource(fontWithFallback);
    }

    /**
     * @noinspection ALL
     */
    public JComponent $$$getRootComponent$$$() {
        return mainPanel;
    }
}
